# Spotify Skeleton

Este es un proyecto de ejemplo para una aplicación de Spotify utilizando Kotlin y Jetpack Compose.

## Toma de decisiones

### Herramientas

- Android Studio
- Copilot

### Arquitectura
MVI (Model-View-Intent) es una arquitectura que se basa en la separación de las capas de la aplicación en tres partes: Model, View y Intent.
Clean architecture es una arquitectura que se basa en la separación de las capas de la aplicación en tres partes: Domain, Data y Presentation.

### Metodología de trabajo
git flow

### Pasos

#### 10-Oct-2024
Se intentó incluid un módulo `includeBuild("build-logic")` que gestionara la base del proyecto o `convenciones`.
Al complicarse la configuración de los módulos, se optó por no incluirlo.

- Inclusión de com.android.tools.build:gradle:8.2.2, mirar en que consiste.

- Utilización de la librería de `Retrofit Adapters` de `skydoves` para la obtención de un Result. En otros proyectos
he utilizado `GsonConverterFactory` para posteriormente mapearlo a `Either` con la librería `arrow`.

#### 20-Oct-2024
- Se empieza a utiliza commit lint para los commits - `20-Oct-2024`

### Objetivos

#### 10-Oct-2024
- Splash Screen - ✅
- Compose navigation - ✅
- Compose - ✅
- Retrofit - ✅
- Guardar token en shared preferences - ✅
- Inyección de dependencias - ✅
- Mock build - ✅

#### 20-Oct-2024
- Lint
- Spotless - ✅
- CI/CD all commits
- Guardar datos de manera local (Room)
- Remove native splash
- Search Artists Screen
- Tracks List Screen
- Tests - ✅
- Tests de UI ?
- SwipeRefreshLayout
- Ordenar .toml - Usado AS para la ordenación(Edit > Sort lines) ✅
- Regla orden alfabético .toml ✅
- Modo claro y oscuro.
- Utilizar DataStore
- Buen convenio de commits
- Conventions
- Plugin api o implementation

#### 6-Nov-2024
- GitHook (Huski)
- Workflow
- Github Actions
  - Spotless
  - Tests
- Plugins cambiarlo de `id` a `alias` llevarlo al toml
- Convenciones
  - Convention plugin
- Ordenar múltiples .toml
- READ_TIMEOUT to READ_TIMEOUT_SEC
- Rendimiento
- Seguridad (OWASP, Dependency check)
  - https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/index.html

### Problemas

#### 10-Oct-2024
✅ Implementación de módulos desde cero
  - Fueron creados como modulos de tipo proyecto y no como android library. La solución fue sustituyendo
  el plugin de `com.android.application` por `com.android.library` en el archivo `build.gradle.kts`.
✅ He intentado utilizar `Kotest` que me gusta utilizarla para con el spec style `BehaviorSpec`(Given, When, Then), por no dedicarle mucho tiempo a solucionarlo he optado por utilizar `JUnit`.

#### 20-Oct-2024
❓ Github GPG, me decía que era incorrecta mi clave pública. ¿Puede ser porque el correo de git no coincide con la clave generada?

#### 3-Nov-2024
❓ Tuve que actualizar Kotlin y composeCompiler para solucionar un error de kapt3
    superclass access check failed: class org.jetbrains.kotlin.kapt3

### Dudas

#### 10-Oct-2024
- ¿Qué tema es el recomendado para un proyecto android de tema claro y oscuro? Theme.Material3 ✅
- ¿Grafos de navegación? No hacen falta. ✅
- ¿Encrypted shared preference? DataStore ✅
- ¿implementation o api? - Plugin que te dice dependencia api o implementation ✅
- Conventions ✅
- ¿Qué era `isMinifyEnabled`? minifica el código isEnabled -> a ✅
- Flow or Result - ✅
- Donde guardar las keys de las APIs -- Local.properties ✅

#### 20-Oct-2024`
- ¿Instalar `npm` para meter `commitlint`? ❓
- ratchetFrom("origin/develop") - Spotless - ¿Qué hace?  ❓

#### 3-Nov-2024
- ¿Cuando utilizar los datasources?¿Hacen falta? ✅

#### 24-Nov-2024
❓ gradlePlugin-spotless y gradlePlugin-kotlin del fichero toml se encuentran
en [libraries] y no en [plugins]
❓ debounce

### Información

Github GPG
Convenciones gradle
Moshi o kotlin serialization
DataStore

##### Commits - Lint android
Huski o commit lint
https://cbea.ms/git-commit/
https://www.conventionalcommits.org/en/v1.0.0/
https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits
https://commitlint.js.org/

##### Flow
https://flowmarbles.com/

git hook

https://git-scm.com/book/ms/v2/Customizing-Git-Git-Hooks

----
Ktlint, ktfmt (formateo puro de código)
detekt (tira más a analizar el código)
Spotless
----

Trunk Based Development - https://trunkbaseddevelopment.com/
Github flow - https://githubflow.github.io/

https://perfetto.dev/ - Rendimiento