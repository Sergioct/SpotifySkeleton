# Spotify Skeleton

Este es un proyecto de ejemplo para una aplicación de Spotify utilizando Kotlin y Jetpack Compose.

## Toma de decisiones

### Herramientas

- Android Studio
- Copilot

### Arquitectura
MVI (Model-View-Intent) es una arquitectura que se basa en la separación de las capas de la aplicación en tres partes: Model, View y Intent.
Clean architecture es una arquitectura que se basa en la separación de las capas de la aplicación en tres partes: Domain, Data y Presentation.

### Pasos

Se intentó incluid un módulo `includeBuild("build-logic")` que gestionara la base del proyecto o `convenciones`.
Al complicarse la configuración de los módulos, se optó por no incluirlo.

- Inclusión de com.android.tools.build:gradle:8.2.2, mirar en que consiste.

- Utilización de la librería de `Retrofit Adapters` de `skydoves` para la obtención de un Result. En otros proyectos
he utilizado `GsonConverterFactory` para posteriormente mapearlo a `Either` con la librería `arrow`.

### Objetivos

- Splash Screen - DONE
- Compose navigation - DONE
- Compose - DONE
- Retrofit - DONE
- Guardar token en shared preferences - DONE
- Inyección de dependencias - DONE
- Guardar datos de manera local (Room)
- Remove native splash
- Mock build - DONE
- Search Artists Screen
- Tracks List Screen
- Tests - DONE
- Tests de UI ?
- SwipeRefreshLayout
- Lint 
  - Regla orden alfabético .toml
- Spotless ?
- CI/CD ?
- Modo claro y oscuro.
- Utilizar DataStore
- Buen convenio de commits

### Problemas

- Implementación de módulos desde cero
  - Fueron creados como modulos de tipo proyecto y no como android library. La solución fue sustituyendo
  el plugin de `com.android.application` por `com.android.library` en el archivo `build.gradle.kts`.
- He intentado utilizar `Kotest` que me gusta utilizarla para con el spec style `BehaviorSpec`(Given, When, Then), por no dedicarle mucho tiempo a solucionarlo he optado por utilizar `JUnit`.

### Dudas

- ¿Qué tema es el recomendado para un proyecto android de tema claro y oscuro? Theme.Material3
- ¿Grafos de navegación? No hacen falta.
- ¿Encrypted shared preference? DataStore
- ¿implementation o api? - Plugin que te dice dependencia api o implementation
- Conventions
- ¿Qué era `isMinifyEnabled`? minifica el código isEnabled -> a
- Flow or Result - DONE
- Donde guardar las keys de las APIs -- Local.properties

### Información

Github GPG
Convenciones gradle
Moshi o kotlin serialization
DataStore
Huski o commit lint
https://cbea.ms/git-commit/

https://www.conventionalcommits.org/en/v1.0.0/

https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits

https://commitlint.js.org/

https://flowmarbles.com/

git hook

https://git-scm.com/book/ms/v2/Customizing-Git-Git-Hooks

----
Lint android
Ktlint, ktfmt (formateo puro de código)
detekt (tira más a analizar el código)
Spotless
----