# Spotify Skeleton

Este es un proyecto de ejemplo para una aplicación de Spotify utilizando Kotlin y Jetpack Compose.

## Toma de decisiones

### Herramientas

- Android Studio
- Copilot

### Arquitectura
MVI (Model-View-Intent) es una arquitectura que se basa en la separación de las capas de la aplicación en tres partes: Model, View y Intent.
Clean architecture es una arquitectura que se basa en la separación de las capas de la aplicación en tres partes: Domain, Data y Presentation.

### Pasos

Se intentó incluid un módulo `includeBuild("build-logic")` que gestionara la base del proyecto o `convenciones`.
Al complicarse la configuración de los módulos, se optó por no incluirlo.

- Inclusión de com.android.tools.build:gradle:8.2.2, mirar en que consiste.

- Utilización de la librería de `Retrofit Adapters` de `skydoves` para la obtención de un Result. En otros proyectos
he utilizado `GsonConverterFactory` para posteriormente mapearlo a `Either` con la librería `arrow`.

### Objetivos

- Splash Screen
- Compose
- Retrofit
- Modo claro y oscuro.
- Guardar datos de manera local
- Tests
- Tests de UI ?
- SwipeRefreshLayout
- Lint ?
- Spotless ?
- CI/CD ?

### Problemas

- Implementación de módulos desde cero
  - Fueron creados como modulos de tipo proyecto y no como android library. La solución fue sustituyendo
  el plugin de `com.android.application` por `com.android.library` en el archivo `build.gradle.kts`.
- He intentado utilizar `Kotest` que me gusta utilizarla para con el spec style `BehaviorSpec`(Given, When, Then), por no dedicarle mucho tiempo a solucionarlo he optado por utilizar `JUnit`.

### Dudas

- ¿Qué tema es el recomendado para un proyecto android de tema claro y oscuro?
- ¿Grafos de navegación?
- ¿Encrypted shared preference?
- ¿implementation o api?
- Conventions
- ¿Qué era `isMinifyEnabled`?
- Flow or Result